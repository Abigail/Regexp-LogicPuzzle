#!/opt/perl/bin/perl

use 5.028;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';
use experimental 'lexical_subs';

use lib 'lib';

use Regexp::LogicPuzzle::StarBattle;

sub run_test ($houses, $nr_of_stars = 1) {
    my $obj = Regexp::LogicPuzzle::StarBattle:: -> new -> init;

    $obj -> set_nr_of_stars ($nr_of_stars)
         -> set_houses ($houses);

    $obj -> build;

    my $subject = $obj -> subject;
    my $pattern = $obj -> pattern;

#   say $subject =~ s/;/\n;/gr;
#   say $pattern =~ s/;/\n;/gr;

    $subject =~ /$pattern/x or die "No match";

    for (my $x = 0; $x < $obj -> X; $x ++) {
        for (my $y = 0; $y < $obj -> Y; $y ++) {
            print $+ {"cell_${x}_${y}"} || ".";
        }
        print "\n";
    }
    say "";
}


run_test <<~ '--', 1;
    AAAAB
    AAAAB
    ACCCB
    DCCBB
    DDDEE
    --

#
#   Solution:
#
#   ...*.
#   *....
#   ..*..
#   ....*
#   .*...
#

run_test <<~ '--', 1;
    AAAAA
    BAAAA
    BCCCC
    BBCCD
    BEEDD
    --


run_test <<~ '--', 2 if 0;
    ABBBBBBBBB
    ABBBBCBBBD
    AACCCCCDBD
    EACCFGCDDD
    EAAAFGGDDD
    EEAFFGGGHH
    EEAFGGHHHH
    EEAFGGIIJJ
    EEAFIIIIJJ
    EEAAIIIIJJ
    --

run_test <<~ '--', 2 if 1;
    AAAAAAAAAA
    AABAAAAACA
    DABAAACCCA
    DABEEECCCA
    DAAEEEECCF
    DAAGEEFFFF
    HHAGEEEEFF
    HHHGEEEEIF
    HHHEEJJEII
    HHHHEJJJII
    --
